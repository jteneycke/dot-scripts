set nocompatible
syntax on
filetype off

set mouse=a
set number
set hlsearch
set expandtab
set synmaxcol=250
set guifont=Ubuntu\ Mono\ 24
set clipboard=unnamedplus " Yank and paste to the system clipboard

if &term =~ '256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" automatically resize window
au VimResized * exe "normal! \<c-w>="

" _ backups
set undodir=~/.vim/tmp/undo//     " undo files
set undofile
set undolevels=3000
set undoreload=10000
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup
set noswapfile

inoremap jk <Esc>
vnoremap jk <Esc>

let mapleader=" "

" Save current file, reload vim config, and restart i3.
map <Leader>r :w<CR>:so ~/.vimrc<CR>:call system("i3-msg restart")<CR>
map <Leader>c :!zsh -e rc-commit<CR>
map <Leader>b :BundleInstall<CR>

" Easy splitted window navigation
map <Leader>h <C-w>h
map <Leader>l <C-w>l

" Fast up / down
nnoremap <S-j> <C-d>
nnoremap <S-k> <C-u>

" Wicked Tab management
map <Leader>j gT
map <Leader>k gt
map <Leader>t :tabnew<CR>
map <Leader>q :q<CR>
map <Leader>s :w<CR>

map <Leader>g :Goyo<CR> :Limelight!!0.8<CR>

" Begin Vundle Config
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle (need this for the rest)
Bundle 'gmarik/vundle'

" nerdtree
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
map <Leader>f <plug>NERDTreeTabsToggle<CR>

" My Bundles here:
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'tpope/vim-fugitive'
"Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'guns/vim-clojure-static'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-classpath'
Bundle 'tpope/vim-surround'
Bundle 'itchyny/lightline.vim'
"Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-bundler'
Bundle 'junegunn/goyo.vim'
Bundle 'junegunn/limelight.vim'
Bundle 'junegunn/seoul256.vim'
Bundle 'junegunn/rainbow_parentheses.vim'

let g:seoul256_background = 234
colo seoul256

" language tools
Bundle 'scrooloose/syntastic'
Bundle 'digitaltoad/vim-jade'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'elixir-lang/vim-elixir'
Bundle 'tkztmk/vim-vala'
Bundle 'airblade/vim-gitgutter'
Bundle 'mileszs/ack.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-endwise'
Bundle 'vim-scripts/omlet.vim'
Bundle 'majutsushi/tagbar'

let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"
execute "set rtp+=" . g:opamshare . "/merlin/vimbufsync"

Bundle 'exu/pgsql.vim'
au BufNewFile,BufRead *.sql setf pgsql
au BufNewFile,BufRead *.ejs* set filetype=html
au BufNewFile,BufRead *.html.slim set filetype=slim
au BufNewFile,BufRead *.cljs set filetype=clojure
au BufNewFile,BufRead *.pde set filetype=java
au BufNewFile,BufRead *.hl set filetype=clojure
au BufNewFile,BufRead *.liso set filetype=julia
au BufNewFile,BufRead *.vala set filetype=cs
au BufNewFile,BufRead *.odocl set filetype=ocaml
au BufNewFile,BufRead *.topscript set filetype=ocaml
au BufNewFile,BufRead *.rawscript set filetype=ocaml
au BufNewFile,BufRead .pryrc set filetype=ruby
au BufNewFile,BufRead *.routes set filetype=erlang
au BufNewFile,BufRead rebar.config set filetype=erlang


"let s:bcs = b:current_syntax
"unlet b:current_syntax
"syntax include @SQL pgsql.vim
"let b:current_syntax = s:bcs
"syntax region rubyHereDocSQL matchgroup=Statement start=+<<\z(SQL\)+ end=+^\z1$+ contains=@SQL
"syntax region rubyHereDocDashSQL matchgroup=Statement start=+<<-\z(SQL\)+ end=+\s\+\z1$+ contains=@SQL

" Indent Settings
Bundle 'nathanaelkane/vim-indent-guides'
set ts=2 sw=2 et
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0 
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black    ctermbg=235 
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=236 

Bundle 'michaeljsmith/vim-indent-object'
let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]
 
" CtrlP 
Bundle 'kien/ctrlp.vim'
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_match_window_bottom = 0 " Show at top of window
let g:ctrlp_jump_to_buffer = 'Et' " Jump to tab AND buffer if already open
let g:ctrlp_split_window = 1 " <CR> = New Tab
let g:ctrlp_open_new_file = 't' " Open newly created files in a new tab
let g:ctrlp_open_multiple_files = 't' " Open multiple files in new tabs
let g:ctrlp_show_hidden = 1 " Index hidden files

set wildignore+=*/public/uploads/*

" Themes
Bundle 'sjl/badwolf'
Bundle 'flazz/vim-colorschemes'
Bundle 'endel/vim-github-colorscheme'
Bundle 'altercation/vim-colors-solarized'
Bundle 'chriskempson/base16-vim'
Bundle 'tomasr/molokai'
"colorscheme molokai

" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave * set nocursorline
    au WinEnter * set cursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
augroup END

" rspec mappings
"map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"
"function! RunCurrentSpecFile()
"  if InSpecFile()
"    let l:command = "s " . @% . " -f documentation"
"    call SetLastSpecCommand(l:command)
"    call RunSpecs(l:command)
"  endif
"endfunction
"
"function! RunNearestSpec()
"  if InSpecFile()
"    let l:command = "s " . @% . " -l " . line(".") . " -f documentation"
"    call SetLastSpecCommand(l:command)
"    call RunSpecs(l:command)
"  endif
"endfunction
"
"function! RunLastSpec()
"  if exists("t:last_spec_command")
"    call RunSpecs(t:last_spec_command)
"  endif
"endfunction
"
"function! InSpecFile()
"  return match(expand("%"), "_spec.rb$") != -1
"endfunction
"
"function! SetLastSpecCommand(command)
"  let t:last_spec_command = a:command
"endfunction
"
"function! RunSpecs(command)
"  execute ":w\|!clear && echo " . a:command . " && echo && " . a:command
"endfunction

" Automatically set paste mode in Vim when pasting in insert mode  
" https://coderwall.com/p/if9mda
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"                                                 
  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~                                       
  set paste
  return ""
endfunction
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()         
 

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
